#!/bin/bash
#
# AI-TEAM-TMUX - Multi-AI Collaborative Development Environment
# Version: 1.0 (Simplified)
#

set -euo pipefail

# Default Configuration
readonly DEFAULT_SESSION="ai-team-tmux"
readonly CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/ai-team-tmux"
readonly LOG_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/ai-team-tmux/logs"
readonly RECORD_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/ai-team-tmux/recordings"
readonly CONFIG_FILE="${CONFIG_DIR}/config.conf"

# Parameters (will be set after parsing special commands)
SESSION_NAME=""

# Colors (ANSI codes stored as variables)
declare -A COLORS=(
    [claude]="\033[38;5;82m"
    [codex]="\033[38;5;141m"
    [gemini]="\033[38;5;214m"
    [cursor]="\033[38;5;39m"
    [log]="\033[38;5;87m"
    [reset]="\033[0m"
)

# Error handling
error_exit() {
    echo "Error: $1" >&2
    exit "${2:-1}"
}

# Validate input
validate_input() {
    if [[ ! "$SESSION_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        error_exit "Invalid session name. Use only alphanumeric characters, hyphens, and underscores." 2
    fi
}

# Initialize directories
init_dirs() {
    local dirs=("$CONFIG_DIR" "$LOG_DIR" "$RECORD_DIR")
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir" || error_exit "Failed to create directory: $dir" 4
    done
    
    # Create default config file if it doesn't exist
    if [ ! -f "$CONFIG_FILE" ]; then
        cat > "$CONFIG_FILE" << EOF
# AI-Team-TMUX Configuration
# Generated on: $(date)

# Default session name (do not modify - use command line argument instead)
# DEFAULT_SESSION_NAME="ai-team-tmux"

# Enable logging (yes/no)
ENABLE_LOGGING="yes"

# Enable session recording (yes/no)
ENABLE_RECORDING="no"

# Log level (info/debug)
LOG_LEVEL="info"

# Custom AI commands (uncomment to override)
# AI_CLAUDE_CMD="claude"
# AI_CURSOR_CMD="cursor-agent"
# AI_CODEX_CMD="codex"
# AI_GEMINI_CMD="gemini"
EOF
    fi
}

# Check if session exists
session_exists() {
    tmux has-session -t "$1" 2>/dev/null
}

# Check if CLI is available
check_cli() {
    command -v "$1" >/dev/null 2>&1
}

# Load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Start logging for a session
start_logging() {
    local session="$1"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local log_file="${LOG_DIR}/${session}_${timestamp}.log"
    
    # Load config to check if logging is enabled
    load_config
    
    if [ "${ENABLE_LOGGING:-yes}" = "yes" ]; then
        echo "[$(date)] Session started: $session" > "$log_file"
        echo "[$(date)] Available AIs: $2" >> "$log_file"
        echo "Logging to: $log_file"
    fi
}

# Start recording for a session
start_recording() {
    local session="$1"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local record_file="${RECORD_DIR}/${session}_${timestamp}.rec"
    
    # Load config to check if recording is enabled
    load_config
    
    if [ "${ENABLE_RECORDING:-no}" = "yes" ]; then
        tmux pipe-pane -t "$session" "cat >> $record_file"
        echo "Recording to: $record_file"
    fi
}

# Create layout and start available AIs
create_and_start() {
    local available_ais=()
    local pane_count=0
    
    # Check which AIs are available
    check_cli "claude" && available_ais+=("claude")
    check_cli "cursor-agent" && available_ais+=("cursor")
    check_cli "codex" && available_ais+=("codex")
    check_cli "gemini" && available_ais+=("gemini")
    
    if [ ${#available_ais[@]} -eq 0 ]; then
        echo "Warning: No AI CLIs found. Creating basic tmux session with bash."
        tmux new-session -d -s "$SESSION_NAME" bash
        return
    fi
    
    echo "Found ${#available_ais[@]} AI CLI(s): ${available_ais[*]}"
    
    # Start logging
    start_logging "$SESSION_NAME" "${available_ais[*]}"
    
    # Create session with first available AI
    case "${available_ais[0]}" in
        claude)
            tmux new-session -d -s "$SESSION_NAME" -c "$PWD" "bash -c 'echo -e \"\033[38;5;82m🤖 Claude AI Ready\033[0m\" && exec claude'"
            tmux select-pane -t "$SESSION_NAME:0.0" -T "🤖 Claude"
            ;;
        cursor)
            tmux new-session -d -s "$SESSION_NAME" -c "$PWD" "bash -c 'echo -e \"\033[38;5;39m🖱️ Cursor AI Ready\033[0m\" && exec cursor-agent'"
            tmux select-pane -t "$SESSION_NAME:0.0" -T "🖱️ Cursor"
            ;;
        codex)
            tmux new-session -d -s "$SESSION_NAME" -c "$PWD" "bash -c 'echo -e \"\033[38;5;141m🔧 Codex AI Ready\033[0m\" && exec codex'"
            tmux select-pane -t "$SESSION_NAME:0.0" -T "🔧 Codex"
            ;;
        gemini)
            tmux new-session -d -s "$SESSION_NAME" -c "$PWD" "bash -c 'echo -e \"\033[38;5;214m✨ Gemini AI Ready\033[0m\" && exec gemini'"
            tmux select-pane -t "$SESSION_NAME:0.0" -T "✨ Gemini"
            ;;
    esac
    
    # Add remaining AIs
    for ((i=1; i<${#available_ais[@]}; i++)); do
        local ai="${available_ais[$i]}"
        
        # Determine split type based on number of panes
        if [ $i -eq 1 ]; then
            # Second pane - split horizontally
            local split_opts="-h -t $SESSION_NAME:0.0"
        elif [ $i -eq 2 ]; then
            # Third pane - split second pane vertically
            local split_opts="-v -t $SESSION_NAME:0.1"
        elif [ $i -eq 3 ]; then
            # Fourth pane - split first pane vertically
            tmux select-pane -t "$SESSION_NAME:0.0"
            local split_opts="-v -t $SESSION_NAME:0.0"
        else
            # More than 4 AIs - just split horizontally
            local split_opts="-h"
        fi
        
        case "$ai" in
            claude)
                tmux split-window $split_opts -c "$PWD" "bash -c 'echo -e \"\033[38;5;82m🤖 Claude AI Ready\033[0m\" && exec claude'"
                tmux select-pane -t "$SESSION_NAME:0.$i" -T "🤖 Claude"
                ;;
            cursor)
                tmux split-window $split_opts -c "$PWD" "bash -c 'echo -e \"\033[38;5;39m🖱️ Cursor AI Ready\033[0m\" && exec cursor-agent'"
                tmux select-pane -t "$SESSION_NAME:0.$i" -T "🖱️ Cursor"
                ;;
            codex)
                tmux split-window $split_opts -c "$PWD" "bash -c 'echo -e \"\033[38;5;141m🔧 Codex AI Ready\033[0m\" && exec codex'"
                tmux select-pane -t "$SESSION_NAME:0.$i" -T "🔧 Codex"
                ;;
            gemini)
                tmux split-window $split_opts -c "$PWD" "bash -c 'echo -e \"\033[38;5;214m✨ Gemini AI Ready\033[0m\" && exec gemini'"
                tmux select-pane -t "$SESSION_NAME:0.$i" -T "✨ Gemini"
                ;;
        esac
    done
    
    # Small delay to ensure panes are created
    sleep 0.3
    
    # Set the first pane as active for input
    tmux select-pane -t "$SESSION_NAME:0.0"
}

# Setup tmux styling
setup_tmux_style() {
    # Global settings
    tmux set-option -g mouse on
    tmux set-option -g status-style 'bg=colour234,fg=colour255'
    
    # Window-specific settings for pane borders
    tmux set-window-option -t "$SESSION_NAME:0" pane-border-status top
    tmux set-window-option -t "$SESSION_NAME:0" pane-border-format ' #{pane_title} '
    
    # Set pane border colors
    tmux set-option -g pane-border-style 'fg=colour237'
    tmux set-option -g pane-active-border-style 'fg=colour39,bold'
    
    # Set status bar
    tmux set-option -g status-left "[AI-Team] "
    tmux set-option -g status-right " #S | %H:%M "
    
    # Enable focus events for better pane switching
    tmux set-option -g focus-events on
    
    # Set default terminal for better color support
    tmux set-option -g default-terminal "screen-256color"
    
    # Allow selecting panes with arrow keys
    tmux bind-key -n M-Left select-pane -L
    tmux bind-key -n M-Right select-pane -R
    tmux bind-key -n M-Up select-pane -U
    tmux bind-key -n M-Down select-pane -D
    
    # Allow resizing panes with Shift+arrow keys
    tmux bind-key -n S-Left resize-pane -L 2
    tmux bind-key -n S-Right resize-pane -R 2
    tmux bind-key -n S-Up resize-pane -U 2
    tmux bind-key -n S-Down resize-pane -D 2
}

# Show help
show_help() {
    cat << EOF
AI-TEAM-TMUX - Multi-AI Collaborative Development Environment
Version 1.0

USAGE:
    ai-team-tmux [session-name]

DESCRIPTION:
    Creates a tmux session with up to 4 AI assistants in a 2x2 grid layout.
    Automatically detects installed AI CLIs and creates panes only for 
    available tools.

SUPPORTED AI TOOLS:
    - claude       Claude AI by Anthropic
    - cursor-agent Cursor AI CLI
    - codex        OpenAI Codex
    - gemini       Google Gemini

OPTIONS:
    --help, -h         Show this help message
    --kill <session>   Terminate a tmux session
    --list, -l         List all active AI-Team sessions

EXAMPLES:
    ai-team-tmux                  # Start default session
    ai-team-tmux dev-session      # Start named session
    ai-team-tmux --list           # Show active sessions
    ai-team-tmux --kill dev       # Kill 'dev' session

NOTE:
    The tool will only create panes for AI CLIs that are installed and
    available in your PATH. Use 'Ctrl-b d' to detach from the session.
EOF
}

# Main execution
main() {
    validate_input
    
    if session_exists "$SESSION_NAME"; then
        echo "Session '$SESSION_NAME' already exists. Attaching..."
        tmux attach-session -t "$SESSION_NAME"
        exit 0
    fi
    
    init_dirs
    
    # Show info
    echo -e "\n${COLORS[claude]}═══════════════════════════════════════════════════════${COLORS[reset]}"
    echo -e "${COLORS[gemini]}    AI-TEAM-TMUX - Collaborative AI Environment${COLORS[reset]}"
    echo -e "${COLORS[claude]}═══════════════════════════════════════════════════════${COLORS[reset]}\n"
    echo "Creating session: $SESSION_NAME"
    
    # Create quad layout and start AIs
    create_and_start
    
    # Small delay to ensure panes are ready
    sleep 0.5
    
    # Setup styling
    setup_tmux_style
    
    # Start recording if enabled
    start_recording "$SESSION_NAME"
    
    echo "Session created. Attaching..."
    echo "Use 'Ctrl-b d' to detach, 'Ctrl-b ?' for help"
    echo "Navigate panes: Alt+Arrow keys | Resize panes: Shift+Arrow keys"
    
    # Small delay before attaching
    sleep 1
    
    tmux attach-session -t "$SESSION_NAME"
}

# Parse command line arguments
case "${1:-}" in
    --help|-h)
        show_help
        exit 0
        ;;
    --kill|-k)
        SESSION="${2:-$DEFAULT_SESSION}"
        if session_exists "$SESSION"; then
            tmux kill-session -t "$SESSION" && echo "✅ Session killed"
        else
            error_exit "Session not found" 8
        fi
        exit 0
        ;;
    --list|-l)
        echo "Active AI Team Sessions:"
        tmux list-sessions 2>/dev/null | grep -E "^ai-team" || echo "No sessions found"
        exit 0
        ;;
    *)
        # Set session name after parsing special commands
        SESSION_NAME="${1:-$DEFAULT_SESSION}"
        main
        ;;
esac